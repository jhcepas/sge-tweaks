#!/usr/bin/env python
import commands
import sys
import os
import argparse
from string import strip
from collections import defaultdict 
import re

MEM_STRING_LEN = 15
MAXVMEMMATCH = re.compile("maxvmem=(\d+(\.\d+)?\w?)")
VMEMMATCH = re.compile("vmem=(\d+(\.\d+)?\w?)")
H_VMEMMATCH = re.compile("h_vmem=(\d+(\.\d+)?\w?)")
H_VMEMMATCH_m = re.compile("h_vmem=(\d+(\.\d+)?\w?)", re.MULTILINE)
DEFAULT_RESERVED_MEM = (1024**3) * 2 

def color(color, string):
    color2code = {
        "header": '\033[95m',
        "lblue": '\033[94m',
        "lgreen": '\033[92m',
        "yellow": '\033[93m',
        "lred": '\033[91m',
        "magenta": "\033[35m",
        "white": "\033[37m",
        "red": '\033[31m',
        "blue": '\033[34m',
        "purple": '\033[35m',
        "green": '\033[32m',
        "cyan": '\033[36m',
        "brown": '\033[33m',
        
    }
    END = '\033[0m'
    return ''.join([color2code[color], string, END])

class bcolors:
    HEADER = '\033[95m'
    BLUE = '\033[94m'
    GREEN = '\033[92m'
    YELLOW = '\033[93m'
    RED = '\033[91m'
    ENDC = '\033[0m'

    def disable(self):
        self.HEADER = ''
        self.BLUE = ''
        self.GREEN = ''
        self.YELLOW = ''
        self.RED = ''
        self.ENDC = ''

# 
# Here some utils taken from my scripts
#
mK = 1024
mM = 1024*1024
mG = 1024*1024*1024
mT = 1024*1024*1024*1024

mk = 1000
mm = 1000*1000
mg = 1000*1000*1000
mt = 1000*1000*1000*1000

DAY = 3600 * 24
HOUR = 3600
MINUTE = 60

def get_hosts_in_queues(queues):
    all_hosts = set()
    for q in queues:
        qinfo = commands.getoutput('qconf -sq %s' %q)
        qinfo = qinfo.replace("\\\n", " ")
        match = re.search("hostlist\s(.+)", qinfo, re.MULTILINE)
        if match:
            for host in [h.strip() for h in match.groups()[0].split()]:
                if host.startswith("@"):
                    hginfo = commands.getoutput('qconf -shgrp %s' %host)
                    hginfo = hginfo.replace("\\\n", " ")
                    match = re.search("hostlist\s(.+)", hginfo, re.MULTILINE)
                    all_hosts.update([h.strip() for h in match.groups()[0].split()])
                else:
                    all_hosts.update([host])

    # update to keep just the hostname without domain
    for host in all_hosts:
        hostname = host.split('.')[0]
        all_hosts.remove(host)
        all_hosts.add(hostname)

    # convert to list to show nodes sorted
    all_hosts_list = []
    for host in all_hosts:
        all_hosts_list.append(host)

    return list(set(all_hosts_list))

def get_hosts_for_user(user):

    hosts = map(strip, commands.getoutput('qstat -s r -u ' + user + ' | grep -v job-ID |grep -v\
    \'\-\-\'|awk {\'print $8\'}|awk -F \"@\" {\'print $2\'} |awk -F \'.\'\
    {\'print $1\'}').split("\n"))
    
    return list(set(hosts))

def print_as_table(rows, header=None, fields=None, print_header=True, stdout=sys.stdout):
    """ Print >>Stdout, a list matrix as a formated table. row must be a list of
    dicts or lists."""
    if header is None:
        header = []
        
    def _str(i):
        if isinstance(i, float):
            return "%0.2f" %i
        else:
            return str(i)

    def _safe_len(i):
        return len(re.sub('\\033\[\d+m', '',  _str(i)))

    def _safe_rjust(s, just):
        return (" " * (just - _safe_len(s))) + s
        
    vtype = None
    for v in rows:
        if vtype != None and type(v)!=vtype:
            raise ValueError("Mixed row types in input")
        else:
            vtype = type(v)

    lengths  = {}
    if vtype == list or vtype == tuple:
        v_len = len(fields) if fields else len(rows[0])
        
        if header and len(header)!=v_len:
            raise Exception("Bad header length")

        # Get max size of each field
        if not fields:
            fields = range(v_len)
        
        for i,iv in enumerate(fields):
            header_length = 0
            if header != []:
                #header_length = len(_str(header[i]))
                header_length = _safe_len(header[i])
            max_field_length = max( [_safe_len(r[iv]) for r in rows] )
            lengths[i] = max( [ header_length, max_field_length ] )

        if header and print_header:
            # Print >>Stdout, header names
            for i in xrange(len(fields)):
                print >>stdout, _str(header[i]).rjust(lengths[i])+" | ",
            print >>stdout, ""
            # Print >>Stdout, underlines
            for i in xrange(len(fields)):
                print >>stdout, "".rjust(lengths[i],"-")+" | ",
            print >>stdout, ""
        # Print >>Stdout, table lines
        for r in rows:
            for i,iv in enumerate(fields):
                #print >>stdout, _str(r[iv]).rjust(lengths[i])+" | ",
                print >>stdout, _safe_rjust(_str(r[iv]), lengths[i])+" | ",
            print >>stdout, ""

    elif vtype == dict:
        if header == []:
            header = rows[0].keys()
        for ppt in header:
            lengths[ppt] = max( [len(_str(ppt))]+[ len(_str(p.get(ppt,""))) for p in rows])
        if header:
            for ppt in header:
                print >>stdout, _str(ppt).rjust(lengths[ppt])+" | ",
            print >>stdout, ""
            for ppt in header:
                print >>stdout, "".rjust(lengths[ppt],"-")+" | ",
            print >>stdout, ""

        for p in rows:
            for ppt in header:
                print >>stdout, _str(p.get(ppt,"")).rjust(lengths[ppt])+" | ",
            print >>stdout, ""
            page_counter +=1


def tm2sec(tm):
    try:
        return time.mktime(time.strptime(tm))
    except Exception: 
        return 0.0

def mem2bytes(mem):
    try: 
        bytes = float(mem)
    except ValueError: 
        mod = mem[-1]
        mem = mem[:-1]
        if mod == "K": 
            bytes = float(mem) * mK
        elif mod == "M":
            bytes = float(mem) * mM
        elif mod == "G":
            bytes = float(mem) * mG
        elif mod == "k": 
            bytes =  float(mem) * mk
        elif mod == "m":
            bytes = float(mem) * mm
        elif mod == "g":
            bytes = float(mem) * mg

    return bytes

def bytes2mem(bytes):
    if bytes > mt:
        v = "%0.1f" %(float(bytes)/mt)
        v = v.rstrip("0").rstrip(".") +"T"
    elif bytes > mg:
        v = "%0.1f" %(float(bytes)/mg)
        v = v.rstrip("0").rstrip(".") +"G"
    elif bytes > mm:
        v = "%0.1f" %(float(bytes)/mm)
        v = v.rstrip("0").rstrip(".") +"M"
    elif bytes > mk:
        v = "%0.1f" %(float(bytes)/mk)
        v = v.rstrip("0").rstrip(".") +"K"
    else:
        v = str(bytes)
    return  v

def get_options():
    '''
    parse option from command line call
    '''
    parser = argparse.ArgumentParser(description='Show your cluster usage')

    parser.add_argument('-u', dest='user', default='\'*\'', help='query\
    just this user')

    parser.add_argument('-q', dest='queue', help='query \
            just this queue')


    options = parser.parse_args()

    # check if user exists
    if options.user != '\'*\'':
        userList = set()
        for user in commands.getoutput('qconf -suserl').split("\n"):
            userList.add(user)
        if options.user not in userList:
            print 'user ' + options.user + ' not found'
            sys.exit()

    # check if queue exists
    if options.queue:
        if (os.system('qconf -sq ' + options.queue + ' > /dev/null')) != 0:
            sys.exit()
    

    return options



## 
## Main program starts here
##

options = get_options()
        
## Detect type of mem consumable
PER_SLOT_MEM=False
mem_consumable_type = commands.getoutput('qconf -sc|grep h_vmem|awk \'{print $6}\'').strip()
if mem_consumable_type == "YES":
    PER_SLOT_MEM = True

## detect host names

# I had to use shorter host names (without domain), because they were truncated in qstat output
# hosts = map(strip, commands.getoutput("qconf -sel").split("\n"))

# is user arg is passed only take the node where that
# user is running jobs
if options.user != '\'*\'':
    hosts = get_hosts_for_user(options.user)
    # if both user and queue args are passed...
    if options.queue:
        hostsInQueue = map(strip, get_hosts_in_queues([options.queue]))
        toRemove = []
        for x in hosts:
            if x not in hostsInQueue:
                toRemove.append(x)
        for x in toRemove:
            hosts.remove(x)
    hosts.sort()
else:
    # if just queue arg is passed...
    if options.queue:
        hosts = map(strip, get_hosts_in_queues([options.queue]))
        hosts.sort()
    # if no arg is passed take all exec nodes
    else:
        hosts = map(strip, commands.getoutput('qconf -sel|cut -f1 -d"."').split("\n"))
        hosts.sort()

## Detect running jobs
if options.queue:
    running_jobs = map(strip, commands.getoutput('qstat -s r -u ' +\
        options.user + ' -q ' + options.queue).split("\n"))
else:
    running_jobs = map(strip, commands.getoutput('qstat -s r -u ' +\
            options.user).split("\n"))

## detect consumables of each host
host2avail_mem = {}
host2avail_slots = {}
for h in hosts:
    hinfo = commands.getoutput("qconf -se %s" %h)
    mem_match = re.search(H_VMEMMATCH_m, hinfo)
    slots_match = re.search("[\s,]?slots=(\d+)", hinfo, re.MULTILINE)
   
    if mem_match:
        host2avail_mem[h] = mem2bytes(mem_match.groups()[0])
    else:
        print 'h_vmem should be defined as consumable resource in ' + h
        sys.exit()
    if slots_match:
        host2avail_slots[h] = int(slots_match.groups()[0])
    else:
        print 'slot should be defined as consumable resource in ' + h
        sys.exit()


## Load info about running jobs
host2slots = defaultdict(int)
host2vmem = defaultdict(int)
host2usedmem = defaultdict(int)
job2info = {}
job2vmem = {}
job_task2info = {}

for x in running_jobs[2:]:
    try:
        jid, pri, name, user, status, date, tm,  queue, slots, task = fields = x.split()
    except ValueError:
        task = 1
        jid, pri, name, user, status, date, tm,  queue, slots = fields = x.split()
    
    slots = int(slots)
    task = int(task)
    jid = int(jid)
    if jid not in job2info:
        content = job2info[jid] = commands.getoutput("qstat -j %s" %jid)
        for line in content.split("\n"):
            usage_match = re.search("^usage\s+(\d+):(.+)", line)
            if line.startswith("hard resource_list:"):
                rt_match = re.search("h_rt=(\d+)", line)
                mem_match = re.search(H_VMEMMATCH, line)
                if mem_match:
                    job2vmem[jid] = mem2bytes(mem_match.groups()[0])
                else:
                    job2vmem[jid] = DEFAULT_RESERVED_MEM

            elif usage_match:
                taskinfo = {}
                taskid = int(usage_match.groups()[0])
                mem_match = re.search(VMEMMATCH, line)
                maxmem_match = re.search(MAXVMEMMATCH, line)
                if maxmem_match:
                    taskinfo["maxvmem"] = mem2bytes(maxmem_match.groups()[0])
                if maxmem_match:
                    taskinfo["vmem"] = mem2bytes(mem_match.groups()[0])
                taskinfo["raw"] = line
                job_task2info[(jid, taskid)] = taskinfo
                   
                    
    ho = queue.split("@")[1].split(".")[0]
    host2usedmem[ho] += job_task2info.get((jid, task), {}).get("vmem", 0)
    host2slots[ho]+= slots

    if PER_SLOT_MEM:
        try:
            host2vmem[ho] += (job2vmem[jid] * slots)
        except KeyError:
            print 'h_vmem reservation not found in job with uid %s' % sys.exc_value
    else:
        try:
            host2vmem[ho] += job2vmem[jid]
        except KeyError:
            print 'h_vmem reservation not found in job with uid %s' % sys.exc_value

## show collected info
        
entries = []

total_mem_used = 0
total_mem_reserved = 0
total_mem = 0
total_cpu = 0
total_cpu_used = 0
    
for x in hosts:
    total_mem_used += host2usedmem.get(x, 0)
    total_mem_reserved += host2vmem.get(x, 0)
    total_mem += host2avail_mem[x]
    total_cpu += host2avail_slots[x]
    total_cpu_used += host2slots.get(x, 0)
    
    mem_used = host2usedmem.get(x, 0)
    mem_reserved = host2vmem.get(x, 0)
    mem_avail = host2avail_mem[x]

    mem_factor_used = (mem_used * MEM_STRING_LEN) / mem_avail
    mem_factor_unused = (mem_reserved * MEM_STRING_LEN) / mem_avail
    mem_factor_unused -= mem_factor_used

    mem_char_used = int(round(mem_factor_used))
    mem_char_unused = int(round(mem_factor_unused))
    mem_char_free = MEM_STRING_LEN- mem_char_used - mem_char_unused

    if mem_used > 0.66 * mem_reserved:
        USED_MEM_COL = "lgreen"
    elif mem_used > 0.33 * mem_reserved:
        USED_MEM_COL = "yellow"
    else:
        USED_MEM_COL = "lred"

    mem_eff = (mem_used * 100)  / mem_reserved if mem_reserved else 0.0
    MEM_EFFICIENCY = color(USED_MEM_COL, "%s%%" %( ("%d" %mem_eff).rjust(2)))
    HOST_INFO = "%s CPU, %s" %(color("brown", str(host2avail_slots[x])), color("lblue", bytes2mem(mem_avail)))
   
    fields = [x.ljust(8),
              HOST_INFO,
              "%s / %s" %(color("cyan", str(host2slots.get(x, 0))), host2avail_slots[x]),
              "%s / %s (%s)" % (color("cyan", bytes2mem(mem_used)), bytes2mem(mem_reserved), MEM_EFFICIENCY),
              color("red", "#" * mem_char_used) +
              color("white", "~" * mem_char_unused) +
              color("white", " " * mem_char_free), 
              color("red", "#"*host2slots.get(x, 0)) +
              ("." * (host2avail_slots[x] - host2slots.get(x, 0)))
          ]
    entries.append(fields)

# Create totals entry
HOST_INFO = "%s CPU, %s" %(color("brown", str(total_cpu)), color("lblue", bytes2mem(int(total_mem))))
if total_mem_used > 0.66 * total_mem_reserved:
    USED_MEM_COL = "lgreen"
elif total_mem_used > 0.33 * total_mem_reserved:
    USED_MEM_COL = "yellow"
else:
    USED_MEM_COL = "lred"

mem_eff = (total_mem_used * 100)  / total_mem_reserved if total_mem_reserved else 0.0
MEM_EFFICIENCY = color(USED_MEM_COL, "%s%%" %( ("%d" %mem_eff).rjust(2)))
entries.append([""]*6)
fields = ["TOTALS".ljust(8),
          HOST_INFO,
              "%s / %s" %(color("cyan", str(total_cpu_used)), total_cpu),
              "%s / %s (%s)" % (color("cyan", bytes2mem(total_mem_used)), bytes2mem(total_mem_reserved), MEM_EFFICIENCY),
              "",
              ""
          ]
entries.append(fields)
    
# add a description (with colors) before the output with information about
# what is being printed to stdout
if options.user != '\'*\'':
    description =  "\n" + bcolors.HEADER + "User " + options.user + bcolors.ENDC + "\n"
    if options.queue:
        desk =  "\n" + bcolors.HEADER + "User " + options.user +\
        " in queue " + options.queue + bcolors.ENDC + "\n"
else:
    if options.queue:
        description =  "\n" + bcolors.HEADER + "Jobs in queue " + options.queue +\
        bcolors.ENDC + "\n"
    else: description =  "\n" + bcolors.HEADER + "CLUSTER STATS " + bcolors.ENDC + "\n"

print description    
header = "hostname", "host info", "CPU", "Mem: used/reserved", "Mem usage", "CPU usage" 
#header = bcolors.HEADER + "Host", "S.used", "S.tot.", "M.res.", "M.used","M.tot.", "Mem graph", "Slots graph" + bcolors.ENDC


print_as_table(entries, header=header)

user2prio = defaultdict(list)

BASE_PRIO = -512
for jid, info in job2info.iteritems():
    
    prio = int(re.search("priority:([^\n]+)", info).groups()[0])
    prio =  prio - BASE_PRIO
    if prio > 0:
        prio = color("lred", "%sx" %prio)
    elif prio < 0:
        prio = color("white", "%sx" %prio)
    else:
        prio = color("lgreen", "0x")

    owner = re.search("owner:([^\n]+)", info).groups()[0].strip()
    user2prio[owner].append(prio)
    
print
for user, priorities in user2prio.iteritems():
    print "User", color("green",user.ljust(12)), "has", color("yellow", " %d" %len(priorities)), "job(s) with priorities: ", color("yellow", ', '.join(set(priorities)))
print
print color("white", "* project priority is expressed as a fold factor")
print color("white", "   i.e. 10x = 10 times more priority than the standard level")
print
print color("red", "#"),": used"
print color("white", "~"),": reserved but not used"    
print ". : not used"
print
print "User 'qres -h' for more info"
